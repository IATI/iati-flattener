{
	"info": {
		"_postman_id": "bf399db5-0951-4820-b4d5-1ea6f56767cc",
		"name": "iati-flattener-integration-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST /pvt/flatten/activities",
			"item": [
				{
					"name": "400",
					"item": [
						{
							"name": "No Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: no body\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"No body\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong type of body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: Body must be an application/xml string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Body must be an application/xml string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"fake\": \"iati\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "422",
					"item": [
						{
							"name": "Not IATI XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: No iati-activities element found - is this an organisations doc?\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"No iati-activities element found - is this an organisations doc?\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<not-iati-xml></not-iati-xml>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "200",
					"item": [
						{
							"name": "IATI XML - Activity Checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 1 activity\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"The activity object contains 12 keys\", function () {",
											"    pm.expect( Object.keys(jsonData[0]).length).to.equal(12);",
											"});",
											"pm.test(\"title_narrative_xml_lang attribute is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"title_narrative_xml_lang\"].join()).to.eql(\",fr,es\")",
											"});",
											"pm.test(\"reporting_org_narrative element is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"reporting_org_narrative\"].join()).to.eql(\"Organisation name,Nom de l'organisme\")",
											"});",
											"pm.test(\"The activity object contains linked_data_default\", function () {",
											"    pm.expect(Object.keys(jsonData[0])).to.include('dataset_linked_data_default');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2015-10-11T08:15:37Z\" version=\"2.03\" linked-data-default=\"astringhere\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <reporting-org ref=\"AA-AAA-123456789\" type=\"40\" secondary-reporter=\"0\">\n            <narrative>Organisation name</narrative>\n            <narrative xml:lang=\"fr\">Nom de l'organisme</narrative>\n        </reporting-org>\n\n        <title>\n            <narrative>Activity title</narrative>\n            <narrative xml:lang=\"fr\">Titre de l'activité</narrative>\n            <narrative xml:lang=\"es\">Título de la actividad</narrative>\n        </title>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Full Activities Doc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 1 activity\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"The activity object contains 249 keys\", function () {",
											"    pm.expect( Object.keys(jsonData[0]).length).to.equal(249);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-no-errors.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Sector Percentage Blanks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 1 activity\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"The activity object contains 6 keys\", function () {",
											"    pm.expect(Object.keys(jsonData[0]).length).to.equal(6);",
											"});",
											"pm.test(\"sector_code attribute is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_code\"].join()).to.eql(\"52010,P13\")",
											"});",
											"pm.test(\"sector_vocabulary element is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_vocabulary\"].join()).to.eql(\",99\")",
											"});",
											"pm.test(\"The activity object does not contain sector_percentage\", function () {",
											"    pm.expect(Object.keys(jsonData[0])).to.not.contain('sector_percentage');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <sector code=\"52010\"/>\n        <sector code=\"P13\" vocabulary=\"99\"/>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - NaN for Numeric Multivalued Blanks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 1 activity\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"The activity object contains 24 keys\", function () {",
											"    pm.expect(Object.keys(jsonData[0]).length).to.equal(24);",
											"});",
											"pm.test(\"sector_code attribute is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_code\"].join()).to.eql(\"52010,P13\")",
											"});",
											"pm.test(\"sector_vocabulary element is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_vocabulary\"].join()).to.eql(\",99\")",
											"});",
											"pm.test(\"All multivalued pdoubles fields with an empty value have a NaN\", function () {",
											"    pm.expect( ['sector_percentage', 'recipient_country_percentage', 'recipient_region_percentage','country_budget_items_budget_item_percentage','fss_forecast_year'].map((field) => jsonData[0][field]).every((result) => result.includes('NaN'))).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <sector code=\"52010\"/>\n        <sector code=\"P13\" vocabulary=\"99\" percentage=\"5\"/>\n        <recipient-country code=\"AF\"/>\n        <recipient-country code=\"AG\" percentage=\"25\" />\n        <recipient-region code=\"489\" vocabulary=\"1\" percentage=\"50\" />\n        <recipient-region code=\"A1\" vocabulary=\"99\" vocabulary-uri=\"http://example.com/vocab.html\" />\n        <country-budget-items vocabulary=\"4\">\n   <budget-item code=\"1844\" percentage=\"50\">\n    <description>\n     <narrative>Description text</narrative>\n    </description>\n   </budget-item>\n   <budget-item code=\"1900\" >\n    <description>\n     <narrative>Description text</narrative>\n    </description>\n   </budget-item>\n  </country-budget-items>\n  <fss extraction-date=\"2014-05-06\" priority=\"1\" phaseout-year=\"2016\">\n   <forecast year=\"2014\" value-date=\"2013-07-03\" currency=\"GBP\">10000</forecast>\n   <forecast value-date=\"2013-07-03\" currency=\"GBP\">10000</forecast>\n  </fss>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Sector Percentage 2 Activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 2 activity\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"pm.test(\"The activity object contains 7 keys\", function () {",
											"    pm.expect(Object.keys(jsonData[0]).length).to.equal(7);",
											"});",
											"pm.test(\"first activity sector_code attribute is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_code\"].join()).to.eql(\"52010,P13\")",
											"});",
											"pm.test(\"first activity sector_vocabulary element is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_vocabulary\"].join()).to.eql(\",99\")",
											"});",
											"pm.test(\"first activity sector_percentage element is flattened appropriately, in order\", function () {",
											"    pm.expect(jsonData[0][\"sector_percentage\"].join()).to.eql(\"NaN,100\")",
											"});",
											"pm.test(\"second activity sector_vocabulary element is not present\", function () {",
											"    pm.expect(Object.keys(jsonData[1])).to.not.contain(\"sector_vocabulary\")",
											"});",
											"pm.test(\"second activity sector_percentage element is not present\", function () {",
											"    pm.expect(Object.keys(jsonData[1])).to.not.contain(\"sector_percentage\")",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <sector code=\"52010\"/>\n        <sector code=\"P13\" vocabulary=\"99\" percentage=\"100\"/>\n    </iati-activity>\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <sector code=\"52999\"/>\n        <sector code=\"P15\" />\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Date Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @iso-date, @value-date, @extraction-date",
											"const re = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/)",
											"const jsonData = pm.response.json()[0];",
											"pm.test(\"iso_dates are in solr format\", function () {",
											"    ",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('iso_date')).every((key) => {",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"pm.test(\"value_date are in solr format\", function () {",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('value_date')).every((key) => {",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"pm.test(\"extraction_date are in solr format\", function () {",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('extraction_date')).every((key) => {",
											"        console.log(re.test(jsonData[key]))",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"",
											"// @last-updated-datetime",
											"pm.test(\"extraction_date are in solr format\", function () {",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('_datetime')).every((key) => {",
											"        console.log(re.test(jsonData[key]))",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:20:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <reporting-org ref=\"AA-AAA-123456789\" type=\"40\" secondary-reporter=\"0\">\n            <narrative>Organisation name</narrative>\n            <narrative xml:lang=\"fr\">Nom de l'organisme</narrative>\n        </reporting-org>\n\n        <title>\n            <narrative>Activity title</narrative>\n            <narrative xml:lang=\"fr\">Titre de l'activité</narrative>\n            <narrative xml:lang=\"es\">Título de la actividad</narrative>\n        </title>\n\n        <budget type=\"1\" status=\"1\">\n            <period-start iso-date=\"2014-01-01\" />\n            <period-end iso-date=\"2014-12-31\" />\n            <value currency=\"EUR\" value-date=\"2014-01-01\">3000</value>\n        </budget>\n\n        <fss extraction-date=\"2014-05-06\" priority=\"1\" phaseout-year=\"2016\">\n            <forecast year=\"2014\" value-date=\"2013-07-03\" currency=\"GBP\">10000</forecast>\n        </fss>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Date Format No datetimes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @iso-date, @value-date, @extraction-date",
											"const re = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/)",
											"const jsonData = pm.response.json()[0];",
											"pm.test(\"iso_dates are in solr format\", function () {",
											"    ",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('iso_date')).every((key) => {",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"pm.test(\"value_date are in solr format\", function () {",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('value_date')).every((key) => {",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											"pm.test(\"extraction_date are in solr format\", function () {",
											"    pm.expect(Object.keys(jsonData).filter((key) => key.includes('extraction_date')).every((key) => {",
											"        console.log(re.test(jsonData[key]))",
											"        return re.test(jsonData[key])",
											"    })).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities version=\"2.03\">\n    <iati-activity >\n        <iati-identifier>ACT-1</iati-identifier>\n        <reporting-org ref=\"AA-AAA-123456789\" type=\"40\" secondary-reporter=\"0\">\n            <narrative>Organisation name</narrative>\n            <narrative xml:lang=\"fr\">Nom de l'organisme</narrative>\n        </reporting-org>\n\n        <title>\n            <narrative>Activity title</narrative>\n            <narrative xml:lang=\"fr\">Titre de l'activité</narrative>\n            <narrative xml:lang=\"es\">Título de la actividad</narrative>\n        </title>\n\n        <budget type=\"1\" status=\"1\">\n            <period-start iso-date=\"2014-01-01\" />\n            <period-end iso-date=\"2014-12-31\" />\n            <value currency=\"EUR\" value-date=\"2014-01-01\">3000</value>\n        </budget>\n\n        <fss extraction-date=\"2014-05-06\" priority=\"1\" phaseout-year=\"2016\">\n            <forecast year=\"2014\" value-date=\"2013-07-03\" currency=\"GBP\">10000</forecast>\n        </fss>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Multiple Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 2 activities\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"pm.test(\"Each activity object contains 4 keys\", function () {",
											"    pm.expect(jsonData.every((act) => Object.keys(act).length === 4)).to.be.true;",
											"});",
											"pm.test(\"The activities iati_identifier elements are present\", function () {",
											"    pm.expect(jsonData.map((act) => act.iati_identifier)).to.eql(['ACT-1', 'ACT-2']);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n    </iati-activity>\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-2</iati-identifier>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - IATI Identifier Checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Body contains 2 activities\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"pm.test(\"Each activity object contains 4 keys\", function () {",
											"    pm.expect(jsonData.every((act) => Object.keys(act).length === 4)).to.be.true;",
											"});",
											"pm.test(\"The activities iati_identifier elements are present, with trimmed spaces and no newlines\", function () {",
											"    pm.expect(jsonData.map((act) => act.iati_identifier)).to.eql(['ACT-1', 'XI-IATI-01PROVISION_359']);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities generated-datetime=\"2014-09-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n        <iati-identifier>ACT-1 </iati-identifier>\n    </iati-activity>\n    <iati-activity last-updated-datetime=\"2014-09-10T07:15:37Z\">\n<iati-identifier>XI-IATI-01\nPROVISION_359</iati-identifier>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "IATI XML - Multiple Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"transaction_ref attribute is flattened appropriately, in order\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].transaction_ref.join()).to.eql(\"1234,5678\")",
											"});",
											"pm.test(\"transaction_transaction_date_iso_date element is flattened appropriately, in order\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].transaction_transaction_date_iso_date.join()).to.eql(\"2012-01-01T00:00:00.000Z,2013-01-01T00:00:00.000Z\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<iati-activities>\n    <iati-activity>\n        <iati-identifier>ACT-1</iati-identifier>\n        <reporting-org ref=\"AA-AAA-123456789\" type=\"40\" secondary-reporter=\"0\">\n            <narrative>Organisation name</narrative>\n            <narrative xml:lang=\"fr\">Nom de l'organisme</narrative>\n        </reporting-org>\n        <transaction ref=\"1234\" humanitarian=\"1\">\n            <transaction-type code=\"1\" />\n            <transaction-date iso-date=\"2012-01-01\" />\n        </transaction>\n        <transaction ref=\"5678\">\n            <transaction-type code=\"2\" />\n            <transaction-date iso-date=\"2013-01-01\" />\n        </transaction>\n    </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/flatten/activities",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"flatten",
										"activities"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "POST /pvt/convert-schema",
			"item": [
				{
					"name": "400",
					"item": [
						{
							"name": "No Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: no body\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"No body\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong type of body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: Body must be an application/xml string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Body must be an application/xml string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"fake\": \"iati\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "200",
					"item": [
						{
							"name": "Convert IATI Activities Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header contains application/xml\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/xml');",
											"});",
											"var jsonObject = xml2Json(responseBody);",
											"pm.test(\"name of solr config schema is activity-config\", function () {",
											"    pm.expect(jsonObject.schema.$.name).to.eql(\"activity-config\");",
											"});",
											"const fields = jsonObject.schema.field.map((field) => field.$.name)",
											"pm.test(\"Schema contains element fields iati_identifier,reporting_org\", function () {",
											"    pm.expect(fields).to.contain(\"iati_identifier\",\"reporting_org\");",
											"});",
											"pm.test(\"Schema contains attribute field reporting_org_ref, participating_org_ref\", function () {",
											"    pm.expect(fields).to.contain(\"reporting_org_ref\",\"participating_org_ref\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-activities-schema-flat.xsd"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "POST /pvt/convert-schema-to-config",
			"item": [
				{
					"name": "400",
					"item": [
						{
							"name": "No Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: no body\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"No body\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema-to-config",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema-to-config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong type of body - Object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: Body must be a multipart form of application/xml files\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Body must be a multipart form of application/xml files\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"fake\": \"iati\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema-to-config",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema-to-config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong type of body - Form Filetype",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: Body must be a multipart form of application/xml files\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Body must be a multipart form of application/xml files\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "main",
											"type": "file",
											"src": "CHANGES.txt"
										},
										{
											"key": "common",
											"type": "file",
											"src": "iati-common.xsd"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema-to-config",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema-to-config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong type of body - Form File Key main",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains error: There should be one file with a key of \\\"main\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"There should be one file with a key of \\\"main\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "thing",
											"type": "file",
											"src": "iati-common.xsd"
										},
										{
											"key": "common",
											"type": "file",
											"src": "iati-common.xsd"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema-to-config",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema-to-config"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "200",
					"item": [
						{
							"name": "Convert IATI Activities Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header contains application/xml\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/xml');",
											"});",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"requestHandler /select exists\", function () {",
											"    pm.expect(jsonObject.config.requestHandler[0].$.name).to.eql(\"/select\");",
											"});",
											"pm.test(\"requestHandler has an fl override\", function () {",
											"    pm.expect(jsonObject.config.requestHandler[0].lst.str[1].$.name).to.eql(\"fl\");",
											"});",
											"const respText = pm.response.text();",
											"pm.test(\"reporting_org elements are in order\", function () {",
											"    pm.expect(respText).to.include(\"reporting_org_narrative,reporting_org_ref,reporting_org_type,reporting_org_secondary_reporter,\");",
											"});",
											"pm.test(\"document level elements are at beginning of fl\", function () {",
											"    pm.expect(respText).to.include(\"\\<str name=\\\"fl\\\"\\>iati_activities_document_id,dataset_iati_version,dataset_date_created,dataset_date_updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "main",
											"type": "file",
											"src": "iati-activities-schema.xsd"
										},
										{
											"key": "common",
											"type": "file",
											"src": "iati-common.xsd"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/pvt/convert-schema-to-config",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"convert-schema-to-config"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "GET /pvt/version",
			"item": [
				{
					"name": "Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pvt/version",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pvt",
								"version"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{keyValue}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "{{keyName}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}